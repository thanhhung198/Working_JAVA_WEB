package com.laptrinhjavaweb.repository.impl;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.laptrinhjavaweb.annotation.Table;
import com.laptrinhjavaweb.mapper.ResultSetMapper;
import com.laptrinhjavaweb.paging.Pageable;
import com.laptrinhjavaweb.repository.JpaRepository;

public class SimpleJpaRepository<T> implements JpaRepository<T> {

	private Class<T> zClass;

	@SuppressWarnings("unchecked")
	public SimpleJpaRepository() {
		// T truyen vao moi chi la Object cua no(dung o Object thi chua lam dc gi)-->
		// phai get class của Object khi runtime cta sẽ lấy giá trị column,...
		Type type = getClass().getGenericSuperclass();
		ParameterizedType parameterizedType = (ParameterizedType) type;
		zClass = (Class<T>) parameterizedType.getActualTypeArguments()[0];// ptu thu 0(vtri cua T, neu T nam o vtri 2
																			// thi se la 1)
	}

	@Override
	public List<T> findAll(Map<String, Object> properties, Pageable pageable, Object ... where) {
		String tableName = "";
		if (zClass.isAnnotationPresent(Table.class)) {
			Table tableClass = zClass.getAnnotation(Table.class);// get Table
			tableName = tableClass.name(); // Lay ten table
		}
		StringBuilder sql = new StringBuilder("SELECT * FROM " + tableName + " A  WHERE 1 = 1 ");
		sql = createSQLfindAll(sql,properties);
		if(where != null && where.length > 0) {
			sql.append(where[0]);
		}
		sql.append(" limit " +pageable.getOffset()+", "+pageable.getLimit()+"");
		//List<T> results = new ArrayList<>();
		ResultSetMapper<T> resultSetMapper = new ResultSetMapper<>();
		Connection connection = null;
		//PreparedStatement statement = null;
		Statement statement = null;
		ResultSet resultSet = null;
		try {
			connection = EntityManagerFactory.getConnection();
			//statement = connection.prepareStatement(sql.toString());
			//resultSet = statement.executeQuery();
			statement = connection.createStatement();
			resultSet = statement.executeQuery(sql.toString());
			return resultSetMapper.mapRow(resultSet, this.zClass);
			/*
			 * while (resultSet.next()) { // results.add(); }
			 */

		//	return results;
		} catch (SQLException e) {
			return null;
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					connection.close();
				}
				if (resultSet != null) {
					connection.close();
				}
			} catch (SQLException e) {
				return null;
			}

		}

	}

	private StringBuilder createSQLfindAll(StringBuilder where, Map<String, Object> params) {
		StringBuilder where = new StringBuilder("");
		if(params != null && params.size() > 0) {
			String[] keys = new String[params.size()];
			Object[] values = new Object[params.size()];
			int i = 0;
			for(Map.Entry<String, Object> item: params.entrySet()){
				keys[i] = item.getKey();
				values[i] = item.getValue();
				i++;
			}
			for(int i1 = 0; i1 < keys.length; i1++ ) {
				//chi ap dung vs chuoi don, so don (ko ap dung cho cap doi vd: buildingArea = tu 2 den 3)
				//Ktra KDL la chuoi hay so : instanceof
				if((values[i1] instanceof String) && (StringUtils.isNotBlank(values[i1].toString()))) {
					where.append("AND LOWER(A."+keys[i1]+") LIKE '%"+values[i1].toString()+"%' ");
				}else if((values[i1] instanceof Integer) && (values[i1] != null)) {
					where.append("AND LOWER(A."+keys[i1]+") = "+values[i1]+" ");
				}else if((values[i1] instanceof Long) && (values[i1] != null)) {
					where.append("AND LOWER(A."+keys[i1]+") = "+values[i1]+" ");
				}
			}
		}
		return null;
	}

}
