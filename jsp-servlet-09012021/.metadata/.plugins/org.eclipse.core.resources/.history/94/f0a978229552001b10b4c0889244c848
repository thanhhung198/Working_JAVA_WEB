package com.laptrinhjavaweb.repository.impl;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.laptrinhjavaweb.dto.BuildingDTO;
import com.laptrinhjavaweb.repository.JpaRepository;

public class SimpleJpaRepository<T> implements JpaRepository<T> {

	private Class<T> zClass;

	public SimpleJpaRepository() {
		// phai get class của Object khi runtime cta sẽ lấy giá trị column,...
		Type type = getClass().getGenericSuperclass();
		ParameterizedType parameterizedType = (ParameterizedType) type;
		zClass = (Class<T>) parameterizedType.getActualTypeArguments()[0];//ptu thu 0(vtri cua T, neu T nam o vtri 2 thi se la 1)
	}

	@Override
	public List<T> findAll() {
		List<T> results = new ArrayList<>();
		String sql = "";
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		try {
			connection = EntityManagerFactory.getConnection();
			statement = connection.prepareStatement(sql);
			resultSet = statement.executeQuery();
			/*
			 * while(resultSet.next()) { BuildingDTO buildingDTO = new BuildingDTO();
			 * buildingDTO.setName(resultSet.getString("name"));//get theo ten cot trong DB
			 * buildingDTO.setStreet(resultSet.getString("street"));
			 * results.add(buildingDTO); }
			 */
			return results;
		} catch (SQLException e) {
			return null;
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (statement != null) {
					connection.close();
				}
				if (resultSet != null) {
					connection.close();
				}
			} catch (SQLException e) {
				return null;
			}

		}

	}

}
